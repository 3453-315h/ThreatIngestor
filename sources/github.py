from __future__ import absolute_import

import os
import sys
import datetime

import requests

from sources import Source
import artifacts

SEARCH_URL = "https://api.github.com/search/repositories"

class GitHub(Source):

    def __init__(self, name, search):
        self.name = name
        self.search = search

    def run(self, saved_state):
        print datetime.datetime.utcnow()

        # if no saved_state, search max 1 day ago
        if not saved_state:
            saved_state = (datetime.datetime.utcnow() - datetime.timedelta(days=1)).isoformat()[:-7] + 'Z'

        params = {
            'q': "{search} created:>={timestamp}".format(search=self.search, timestamp=saved_state)
        }
        response = requests.get(SEARCH_URL, params=params)

        saved_state = datetime.datetime.utcnow().isoformat()[:-7] + 'Z'

        artifact_list = []
        for repo in response.json()['items']:
            title = "Manual Task: GitHub {u}".format(u=repo['full_name'])
            description = 'URL: {u}\nTask autogenerated by ThreatIngestor from source: {s}'.format(s=self.name, u=repo['html_url'])
            artifact = artifacts.Task(title, self.name, reference_link=repo['html_url'],
                                      reference_text=description)
            artifact_list.append(artifact)

        return saved_state, artifact_list
